#BlueJ class context
comment0.target=StatisticsStats
comment0.text=\r\n\ This\ class\ is\ used\ to\ handle\ the\ statistics\ for\ the\ statistics\ panel\r\n\ Here\ we\ calculate\ all\ the\ statistics\ that\ are\ shown\ on\ the\ statistics\ panel\r\n\ the\ methods\ in\ this\ class\ are\ called\ in\ statistics\ controller\ in\ order\ to\ be\ shown\ on\ the\ panel\r\n\ @author\ Areeba\ Safdar(k20045738)\ Imaan\ Ghafur(k2102260)\r\n\ Sabeeka\ Ahmad(k20012890)\ Zahra\ Amaan(k21011879)\r\n\ @version\ 03/2022\r\n\r\n
comment1.params=
comment1.target=int\ averageReviews()
comment1.text=\r\n\ To\ fine\ the\ average\ number\ of\ reviews\ (for\ all\ properties)\ I\ iterate\ through\ the\ ArrayList\ properties\r\n\ for\ each\ listing\ within\ properties\ I\ use\ the\ getNumberOfReviews\ method\ to\ get\ the\ number\ of\ reviews\ and\ add\ this\ to\ the\ total\r\n\ which\ has\ been\ set\ to\ 0\ at\ the\ start\r\n\ I\ then\ divide\ this\ total\ by\ the\ size\ of\ properties\ in\ order\ to\ get\ an\ average\r\n\ @return\ the\ average\ by\ floor\ dividing\ total\ by\ number\ of\ listings\r\n
comment2.params=
comment2.target=int\ available()
comment2.text=\r\n\ if\ the\ availibility\ of\ the\ property\ is\ greater\ than\ 0\ then\ the\ total\ is\ incremented\r\n\ the\ total\ represents\ the\ number\ of\ available\ properties\r\n\ @return\ total\r\n
comment3.params=
comment3.target=int\ homes()
comment3.text=\r\n\ Calculates\ the\ total\ number\ of\ listings\ that\ are\ homes.\r\n\ iterate\ through\ all\ the\ listings\ and\ if\ the\ room\ type\ is\ home\ then\ the\ counter\ is\ incremented\ by\ 1\r\n\ @return\ total\ number\ of\ homes\r\n
comment4.params=
comment4.target=java.lang.String\ getMostExpensiveBorough()
comment4.text=\r\n\ Find\ the\ maximum\ value\ by\ using\ collections.max()\ method\r\n\ iterate\ rounf\ the\ hashMap\ to\ find\ the\ key\ that\ has\ is\ mapped\ to\ this\ value\r\n\ The\ borough\ (the\ Key)\ is\ returned\r\n\ @return\ the\ most\ expensive\ borough\r\n
comment5.params=
comment5.target=java.util.HashMap\ getAveragePrice()
comment5.text=\r\n\ In\ getAveragePrice\ we\ are\ creating\ another\ HashMap\ the\ borough\ will\ again\ be\ the\ Key\ but\ the\ value\ will\ be\ the\ average\ price\r\n\ To\ obtain\ the\ average\ price\ we\ first\ add\ up\ all\ the\ prices\r\n\ then\ using\ the\ HashMap\ created\ in\ getListingsPerBorough\ we\ are\ able\ to\ generate\ to\ total\ by\ dividing\ the\ total\ of\ the\ prices\r\n\ by\ the\ counter\ stored\ in\ the\ value\ of\ the\ getListingsPerBorough\ HashMap\r\n\ @return\ HashMap\r\n
comment6.params=
comment6.target=java.util.HashMap\ getAverageReviews()
comment6.text=\r\n\ In\ getAverageReviews\ we\ are\ creating\ another\ HashMap\ in\ this\ the\ borough\ will\ again\ be\ the\ Key\ but\ the\ value\ will\ be\ the\ average\ number\ of\ reviews\r\n\ To\ obtain\ the\ average\ number\ of\ reviews\ we\ first\ add\ up\ all\ the\ reviews\ for\ each\ property\r\n\ then\ using\ the\ HashMap\ created\ in\ getListingsPerBorough\ we\ are\ able\ to\ generate\ an\ average\ by\ dividing\ the\ total\ of\ the\ reviews\r\n\ by\ the\ counter\ stored\ in\ the\ value\ of\ the\ getListingsPerBorough\ HashMap\r\n\ @return\ HashMap\r\n
comment7.params=
comment7.target=java.util.HashMap\ getListingsPerBorough()
comment7.text=\r\n\ This\ method\ will\ create\ a\ hashmap\ called\ listingsCount\r\n\ \ the\ key\ will\ be\ the\ borough\ and\ that\ will\ be\ mapped\ to\ the\ total\ number\ of\ properties\ in\ that\ borough\r\n\r\n
comment8.params=latProperty\ longProperty\ attraction
comment8.target=double\ getDistance(double,\ double,\ AttractionListing)
comment8.text=\r\n\ Thw\ Haversine\ formula\ is\ used\ to\ find\ the\ distance\ between\ 2\ points\ using\ the\ latitude\ and\ longitude\ of\ the\ points\r\n\ we\ are\ using\ the\ spherical\ law\ of\ cosines\ as\ an\ alternative\ as\ this\ is\ simpler\ but\ still\ accurate\r\n\ after\ applying\ the\ formula\ we\ must\ multiply\ the\ answer\ by\ th\ radius\ of\ the\ earth\ in\ the\ units\ that\ we\ want\ the\ distance\ to\ be\ in\r\n
comment9.params=attraction
comment9.target=java.util.ArrayList\ checkDistance(AttractionListing)
comment9.text=\r\n\ The\ attraction\ chosen\ by\ the\ user\ will\ be\ passed\ into\ this\ method\r\n\ We\ will\ then\ calculate\ the\ distance\ from\ each\ property\ to\ this\ attraction\r\n\ While\ iterating\ round\ and\ save\ those\ that\ are\ less\ than\ a\ mile\ away\r\n\ @param\ attraction\r\n\ @return\ nearest\ property\ array\ list\r\n\r\n
numComments=10
